#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 31 12:57:49 2023

@author: magoncal
"""

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
#from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select, WebDriverWait
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC

import numpy as np
import pandas as pd
import random
import time


def transform_time(start, end):
    ''' Transforms the time outputs generated by times to hh:mm:ss '''
    hours, rem = divmod(end-start, 3600)
    minutes, seconds = divmod(rem, 60)
    str_time = ("{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds))
    return(str_time)


def access_page_no_auth(url, el_name):
    options = webdriver.ChromeOptions()
    options.add_argument("user-datadir=/home/datascience/.config/google-chrome/Profile 1");
    options.add_argument("headless");
    
    #driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    #driver.get("https://www.google.com")
    #driver = webdriver.Chrome("/usr/lib/chromium-browser/chromedriver")
    driver.get(url)
    WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.NAME, el_name)))
        
    #time.sleep(1)
    return driver

def set_sel_element(el_name, el_value):
    el_input = Select(driver.find_element("name", el_name))
    el_input.select_by_value(el_value)
    
def press_button():
    el_submit = driver.find_element("xpath", "/html/body/center[2]/form/table/tbody/tr[5]/td[2]/input").click()
    
def set_input(el_name, el_value):
    el_txt = driver.find_element("name", el_name)
    el_txt.click()
    el_txt.clear()
    el_txt.send_keys(el_value)
    
def set_matrix(el_name, el_value):
    el_txtarea = driver.find_element("name", el_name)
    el_txtarea.click()
    el_txtarea.clear()
    for part in el_value.split('\n'):
        el_txtarea.send_keys(part)
        ActionChains(driver).key_down(Keys.SHIFT).key_down(Keys.ENTER).key_up(Keys.SHIFT).key_up(Keys.ENTER).perform()
        
def save_img(dir_path, marbox, exp_time, min_val, tp_data=""):
    el_img = driver.find_element("xpath", "/html/body/center[2]/form/table/tbody/tr[4]/td/table/tbody/tr[2]/td/a/img").click()
    el_img = driver.find_element("xpath", "/html/body/img")
    ActionChains(driver).context_click(el_img).send_keys(Keys.ARROW_DOWN).send_keys(Keys.ARROW_DOWN).send_keys(Keys.RETURN).perform()
    el_img.screenshot(dir_path+"logos/"+marbox+str(min_val)+"_"+exp_time+tp_data+".png")
    driver.back()
    

start_time = time.time()
url = "http://www.benoslab.pitt.edu/cgi-bin/enologos/enologos.cgi"
driver = access_page_no_auth(url, "#reset_form")
time_formated = transform_time(start_time, time.time())
print("Time to load the page: {0}".format(time_formated))
print()

start_time = time.time()
set_sel_element("#reset_form", "3")
press_button()
time_formated = transform_time(start_time, time.time())
print("Time to select defaults: {0}".format(time_formated))
print()

start_time = time.time()
set_sel_element("#organism_priors", "E.coli")
press_button()
time_formated = transform_time(start_time, time.time())
print("Time to select 1st priors: {0}".format(time_formated))
print()

start_time = time.time()
set_sel_element("#organism_priors", "user defined")
set_sel_element("LOGO_TYPE", "weights as entered")
set_sel_element("INPUT_TYPE", "probabilities (Ka's)")
set_input("YAXIS_MAX", "1")
set_input("YAXIS_LABEL", "probability")
set_input("XAXIS_LABEL", "position")
time_formated = transform_time(start_time, time.time())
print("Time to final selections: {0}".format(time_formated))
print()

if __name__ == '__main__':
    
    time_exec = ["ini", "96h"]
    #time_exec = ["96h"]
    min_val = 1000
    marboxes = ["marRAB", "yba0", "rob", "acnA", "acrAB", "fldB", "fldA", "fpr", "hdeA", "mdtG", "poxB", "purA", "ribA", "slp"]
    #marboxes = ["ribA", "slp"]
    tp_data = ""
    
    SOURCE = "withMUTATIONS/"
    dir_path = os.path.join(os.path.dirname(os.getcwd()),'refract-data', SOURCE)
    
    if (tp_data!=""):
        tp_data = "_"+tp_data
    
    for exp_time in time_exec:
        
        start_time = time.time()
        path_file = dir_path+"processed/"+exp_time+str(min_val)+tp_data+"_fractions.txt"
    
        start = 0
        end = 21
        for marbox in marboxes:
            str_mtx = ""
            with open(path_file, 'r') as f:
                for line in f.readlines()[start:end]:
                    str_mtx = str_mtx+line
            str_mtx = str_mtx.replace("\t", " ")
        
            set_matrix("matrix", str_mtx)
            press_button()
            save_img(dir_path, marbox, exp_time, min_val, tp_data)
            start = start+21
            end = end+21
        
        time_formated = transform_time(start_time, time.time())
        print("Time to generate logos from {1} file: {0}".format(time_formated, exp_time))
        print()


